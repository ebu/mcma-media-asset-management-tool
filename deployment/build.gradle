import groovy.json.JsonOutput

task generateTerraformTFVars {
    inputs.property("environment_name", environmentName)
    inputs.property("environment_type", environmentType)
    inputs.property("aws_profile", awsProfile)
    inputs.property("aws_region", awsRegion)
    inputs.property("google_credentials_file", googleCredentialsFile)
    inputs.property("google_bucket_location", googleBucketLocation)
    inputs.property("google_bucket_name", googleBucketName)
    inputs.property("azure_config_file", azureConfigFile)

    def propertyFile = file("${projectDir}/terraform.tfvars.json")
    outputs.file(propertyFile)

    doLast {
        def data = [
                environment_name       : environmentName,
                environment_type       : environmentType,
                global_prefix          : "${environmentName}-${environmentType}",

                aws_profile            : awsProfile,
                aws_region             : awsRegion,

                google_credentials_file: new File(rootDir, googleCredentialsFile).toString(),
                google_bucket_location : googleBucketLocation,
                google_bucket_name     : googleBucketName,

                azure_config_file      : new File(rootDir, azureConfigFile).toString(),
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        propertyFile.write(jsonPretty)
    }
}

task terraformInit(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.file "main.tf"
    inputs.file "versions.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init"
}

task terraformInitUpgrade(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.file "main.tf"
    inputs.file "versions.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init", "-upgrade"
}

task terraformPlan(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "plan"
}

task terraformApply(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "apply", "-auto-approve"
}

task terraformDestroy(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "destroy", "-auto-approve"
}

task terraformOutput(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    mustRunAfter terraformApply
    inputs.file("terraform.tfstate")
    outputs.file("terraform.output.json")
    commandLine terraformExecutable
    args "output", "-json"
    doFirst {
        standardOutput new FileOutputStream("${projectDir}/terraform.output.json")
    }
}

task clean(type: Delete) {
    delete "${projectDir}/.terraform"
    delete "${projectDir}/terraform.output.json"
    delete "${projectDir}/terraform.tfvars.json"
}

task plan {
    dependsOn terraformPlan
}

task apply {
    dependsOn terraformApply
}

task deploy {
    dependsOn apply
    dependsOn ":scripts:post-deploy:run"
}

task destroy {
    dependsOn terraformDestroy
}
